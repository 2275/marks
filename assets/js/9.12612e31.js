(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{282:function(t,e,s){"use strict";s.r(e);var a=s(14),i=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"底层命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#底层命令"}},[t._v("#")]),t._v(" 底层命令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git对象\n    git hash-object -w fileUrl : 生成一个key(hash值):val(压缩后的文件内容)键值对存到.git/objects\ntree对象\n    git update-index --add --cacheinfo 100644 hash test.txt : 往暂存区添加一条记录(让git对象 对应 上文件名)存到.git/index\n    git write-tree : 生成树对象存到.git/objects\ncommit对象\n    echo 'first commit' | git commit-tree treehash : 生成一个提交对象存到.git/objects\n对以上对象的查询\n    git cat-file -p hash       : 拿对应对象的内容\n    git cat-file -t hash       : 拿对应对象的类型\n")])])]),e("h3",{attrs:{id:"查看暂存区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看暂存区"}},[t._v("#")]),t._v(" 查看暂存区")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git ls-files -s        \n")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);