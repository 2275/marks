(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{295:function(t,e,r){"use strict";r.r(e);var a=r(14),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-求和案例-redux精简版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-求和案例-redux精简版"}},[t._v("#")]),t._v(" 1.求和案例_redux精简版")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t(1).去除Count组件自身的状态\n\t(2).src下建立:\n\t\t\t\t\t-redux\n\t\t\t\t\t\t-store.js\n\t\t\t\t\t\t-count_reducer.js\n\n\t(3).store.js：\n\t\t\t\t1).引入redux中的createStore函数，创建一个store\n\t\t\t\t2).createStore调用时要传入一个为其服务的reducer\n\t\t\t\t3).记得暴露store对象\n\n\t(4).count_reducer.js：\n\t\t\t\t1).reducer的本质是一个函数，接收：preState,action，返回加工后的状态\n\t\t\t\t2).reducer有两个作用：初始化状态，加工状态\n\t\t\t\t3).reducer被第一次调用时，是store自动触发的，\n\t\t\t\t\t\t\t\t传递的preState是undefined,\n\t\t\t\t\t\t\t\t传递的action是:{type:'@@REDUX/INIT_a.2.b.4}\n\n\t(5).在index.js中监测store中状态的改变，一旦发生改变重新渲染<App/>\n\t\t\t备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。\n")])])]),e("h2",{attrs:{id:"_2-求和案例-redux完整版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-求和案例-redux完整版"}},[t._v("#")]),t._v(" 2.求和案例_redux完整版")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t新增文件：\n\t\t1.count_action.js 专门用于创建action对象\n\t\t2.constant.js 放置容易写错的type值\n")])])]),e("h2",{attrs:{id:"_3-求和案例-redux异步action版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-求和案例-redux异步action版"}},[t._v("#")]),t._v(" 3.求和案例_redux异步action版")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t (1).明确：延迟的动作不想交给组件自身，想交给action\n\t (2).何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回。\n\t (3).具体编码：\n\t \t\t\t1).yarn add redux-thunk，并配置在store中\n\t \t\t\t2).创建action的函数不再返回一般对象，而是一个函数，该函数中写异步任务。\n\t \t\t\t3).异步任务有结果后，分发一个同步的action去真正操作数据。\n\t (4).备注：异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action。\n")])])]),e("h2",{attrs:{id:"_4-求和案例-react-redux基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-求和案例-react-redux基本使用"}},[t._v("#")]),t._v(" 4.求和案例_react-redux基本使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t\t(1).明确两个概念：\n\t\t\t\t\t1).UI组件:不能使用任何redux的api，只负责页面的呈现、交互等。\n\t\t\t\t\t2).容器组件：负责和redux通信，将结果交给UI组件。\n\t\t(2).如何创建一个容器组件————靠react-redux 的 connect函数\n\t\t\t\t\t\tconnect(mapStateToProps,mapDispatchToProps)(UI组件)\n\t\t\t\t\t\t\t-mapStateToProps:映射状态，返回值是一个对象\n\t\t\t\t\t\t\t-mapDispatchToProps:映射操作状态的方法，返回值是一个对象\n\t\t(3).备注1：容器组件中的store是靠props传进去的，而不是在容器组件中直接引入\n\t\t(4).备注2：mapDispatchToProps，也可以是一个对象\n")])])]),e("h2",{attrs:{id:"_5-求和案例-react-redux优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-求和案例-react-redux优化"}},[t._v("#")]),t._v(" 5.求和案例_react-redux优化")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t\t(1).容器组件和UI组件整合一个文件\n\t\t(2).无需自己给容器组件传递store，给<App/>包裹一个<Provider store={store}>即可。\n\t\t(3).使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。\n\t\t(4).mapDispatchToProps也可以简单的写成一个对象\n\t\t(5).一个组件要和redux“打交道”要经过哪几步？\n\t\t\t\t\t\t(1).定义好UI组件---不暴露\n\t\t\t\t\t\t(2).引入connect生成一个容器组件，并暴露，写法如下：\n\t\t\t\t\t\t\t\tconnect(\n\t\t\t\t\t\t\t\t\tstate => ({key:value}), //映射状态\n\t\t\t\t\t\t\t\t\t{key:xxxxxAction} //映射操作状态的方法\n\t\t\t\t\t\t\t\t)(UI组件)\n\t\t\t\t\t\t(4).在UI组件中通过this.props.xxxxxxx读取和操作状态\n")])])]),e("h2",{attrs:{id:"_6-求和案例-react-redux数据共享版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-求和案例-react-redux数据共享版"}},[t._v("#")]),t._v(" 6.求和案例_react-redux数据共享版")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t\t(1).定义一个Pserson组件，和Count组件通过redux共享数据。\n\t\t(2).为Person组件编写：reducer、action，配置constant常量。\n\t\t(3).重点：Person的reducer和Count的Reducer要使用combineReducers进行合并，\n\t\t\t\t合并后的总状态是一个对象！！！\n\t\t(4).交给store的是总reducer，最后注意在组件中取出状态的时候，记得“取到位”。\n")])])]),e("h2",{attrs:{id:"_7-求和案例-react-redux开发者工具的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-求和案例-react-redux开发者工具的使用"}},[t._v("#")]),t._v(" 7.求和案例_react-redux开发者工具的使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t\t(1).yarn add redux-devtools-extension\n\t\t(2).store中进行配置\n\t\t\t\timport {composeWithDevTools} from 'redux-devtools-extension'\n\t\t\t\tconst store = createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))\n")])])]),e("h2",{attrs:{id:"_8-求和案例-react-redux最终版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-求和案例-react-redux最终版"}},[t._v("#")]),t._v(" 8.求和案例_react-redux最终版")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t\t(1).所有变量名字要规范，尽量触发对象的简写形式。\n\t\t(2).reducers文件夹中，编写index.js专门用于汇总并暴露所有的reducer")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);